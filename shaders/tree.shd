{
	"shadowmap_required" : true,
	"attributes" : ["in_position", "in_normal", "in_tex_coords"]
}

//BEGIN

#version 330

in vec3 in_position;
in vec2 in_tex_coords;
in vec3 in_normal;

out vec3 normals;
out vec4 position;
out vec2 tex_coords;

uniform mat4 world_matrix;
uniform float time;
uniform mat4 view_matrix;
uniform mat4 projection_matrix;

void main( void )
{
	vec4 wind = vec4(1, 0, 0, 0);
	tex_coords = in_tex_coords;
	normals = normalize(mat3(world_matrix) * in_position);
	normals.y = 0.0;
	normals = normalize(normals);
	position = vec4(in_position, 1);
	position = position + position.y * 0.01 * sin(3*time+world_matrix[3].x*0.3) * wind;
	position = world_matrix * position;
	gl_Position = projection_matrix * view_matrix * position; 
	
	gl_FrontColor = vec4(1.0, 1.0, 1.0, 1.0);
}

//~VS

#version 330

in vec4		position;
in vec3		normals;
in vec2 	tex_coords;

out vec4			out_color;

uniform sampler2D	tDiffuse;
uniform sampler2D	shadowmap;
uniform mat4 shadowmap_matrix0;
uniform mat4 shadowmap_matrix1;
uniform mat4 shadowmap_matrix2;
uniform mat4 shadowmap_matrix3;
uniform mat4 world_matrix;
uniform mat4 view_matrix;
uniform vec3 light_dir;
uniform vec4 ambient_color;
uniform float ambient_intensity;
uniform vec4 diffuse_color;
uniform float diffuse_intensity;
uniform vec4 fog_color;
uniform float fog_density;

float getFogFactor(float fFogCoord) 
{ 
	float fResult = exp(-pow(fog_density * fFogCoord, 2.0)); 
	fResult = 1.0-clamp(fResult, 0.0, 1.0); 
	return fResult;
}

void main( void )
{
	float shadow = 1.0;
	vec3 shadow_coord[4] = vec3[](
		vec3(shadowmap_matrix0 * position),
		vec3(shadowmap_matrix1 * position),
		vec3(shadowmap_matrix2 * position),
		vec3(shadowmap_matrix3 * position)
	);
	vec2 tt[4] = vec2[](
		vec2(shadow_coord[0].x, shadow_coord[0].y * 0.25),
		vec2(shadow_coord[1].x, 0.25 + shadow_coord[1].y * 0.25),
		vec2(shadow_coord[2].x, 0.50 + shadow_coord[2].y * 0.25),
		vec2(shadow_coord[3].x, 0.75 + shadow_coord[3].y * 0.25)
	);
	int split_index = 0;
	if(shadow_coord[3].x < 0.99 && shadow_coord[3].x > 0.01
		&& shadow_coord[3].y < 0.99 && shadow_coord[3].y > 0.01)
		split_index = 3;
	if(shadow_coord[2].x < 0.99 && shadow_coord[2].x > 0.01
		&& shadow_coord[2].y < 0.99 && shadow_coord[2].y > 0.01)
		split_index = 2;
	if(shadow_coord[1].x < 0.99 && shadow_coord[1].x > 0.01
		&& shadow_coord[1].y < 0.99 && shadow_coord[1].y > 0.01)
		split_index = 1;
	if(shadow_coord[0].x < 0.99 && shadow_coord[0].x > 0.01
		&& shadow_coord[0].y < 0.99 && shadow_coord[0].y > 0.01)
		split_index = 0;
	
	if(texture2D(shadowmap, tt[split_index]).z < shadow_coord[split_index].z - 0.00005)
		shadow = 0;
	shadow = shadow * max(0, dot(normals, -light_dir));
	vec4 surface = texture2D(tDiffuse, tex_coords).rgba;
	if(surface.a < 0.30)
		discard;

	vec4 ambient = 			ambient_intensity * surface * ambient_color;
	vec4 diffuse = shadow * diffuse_intensity * surface * diffuse_color;

	vec4 p = view_matrix * position;
	out_color = mix(ambient + diffuse, fog_color, getFogFactor(p.z / p.w));
	//out_color = vec4(normals.x, 0, 0, 1);
	//gl_FragColor = vec4(light_dir, 1);
	//gl_FragColor = vec4(1, 0, 0, 1);
}
