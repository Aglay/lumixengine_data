passes = {"MAIN", "SHADOW", "DEFERRED", "POINT_LIGHT"}
attributes = {"in_position", "in_normal", "in_tangents", "in_tex_coords"}
require "shaders/common"
texture_slots = base_fragment_shader_texture_slots
vertex_shader = createShaderSource([[

in vec3 in_position;
in vec2 in_tex_coords;
in vec3 in_normal;
in vec3 in_tangents;

out vec3 normals;
out vec3 tangents;
out vec4 position;
out vec2 tex_coords;

uniform mat4 world_matrix[64];
uniform float time;
uniform mat4 view_matrix;
uniform mat4 projection_matrix;

void main( void )
{
	vec4 wind = vec4(1, 0, 0, 0);
	tex_coords = in_tex_coords / 2048;
	normals = normalize(mat3(world_matrix[gl_InstanceID]) * in_position);
	normals.y = 0.0;
	normals = normalize(normals);
	tangents = vec3(0, 1, 0);
	position = vec4(in_position, 1);
	position = position + position.y * 0.01 * sin(3*time+world_matrix[gl_InstanceID][3].x*0.3) * wind;
	position = world_matrix[gl_InstanceID] * position;
	gl_Position = projection_matrix * view_matrix * position; 
}
]])


fragment_shader = base_fragment_shader
