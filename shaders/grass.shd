{
	"attributes" : ["matrix_index"],
	"shadowmap_required" : true
}

//BEGIN

#version 120
varying vec3 normals;
varying vec4 position;
attribute float matrix_index;
uniform mat4 grass_matrices[64];
uniform float time;
uniform vec3 camera_pos;

void main( void )
{
	vec4 wind = vec4(1, 0, 0, 0);
	mat4 grass_mtx = grass_matrices[int(matrix_index)];
	gl_TexCoord[0]	= gl_MultiTexCoord0;
	normals = normalize(mat3(grass_mtx) * gl_Normal);
	
	position = gl_Vertex + gl_Vertex.y * 0.05 * sin(3*time+grass_mtx[3].x*0.3) * wind;
	vec4 pp = (grass_mtx) * position;
	position.x = position.x * clamp(1.0 - (length(camera_pos - pp.xyz) - 20) / 4.0, 0.0, 1.0);
	position.y = position.y * clamp(1.0 - (length(camera_pos - pp.xyz) - 20) / 4.0, 0.0, 1.0);
	position.z = position.z * clamp(1.0 - (length(camera_pos - pp.xyz) - 20) / 4.0, 0.0, 1.0);
	pp = (gl_ModelViewMatrix * grass_mtx) * position;
	vec4 p = gl_ProjectionMatrix * pp; 
	position = grass_mtx * position;
	gl_Position = p;
	gl_FrontColor = vec4(1.0, 1.0, 1.0, 1.0);
}

//~VS
#version 120
uniform sampler2D	tDiffuse;
uniform vec3 light_dir;
uniform mat4 shadowmap_matrix0;
uniform mat4 shadowmap_matrix1;
uniform mat4 shadowmap_matrix2;
uniform mat4 shadowmap_matrix3;
uniform sampler2D	shadowmap;
varying vec4 position;
uniform mat4 grass_matrices[64];
uniform vec4 ambient_color;
uniform float ambient_intensity;
uniform vec4 diffuse_color;
uniform float diffuse_intensity;

void main( void )
{
	float shadow = 1.0;
	vec4 world_pos = position;
	vec4 shadow_coord[4] = vec4[](
		shadowmap_matrix0 * world_pos,
		shadowmap_matrix1 * world_pos,
		shadowmap_matrix2 * world_pos,
		shadowmap_matrix3 * world_pos
	);
	vec2 tt[4] = vec2[](
		vec2(shadow_coord[0].x, shadow_coord[0].y * 0.25),
		vec2(shadow_coord[1].x, 0.25 + shadow_coord[1].y * 0.25),
		vec2(shadow_coord[2].x, 0.50 + shadow_coord[2].y * 0.25),
		vec2(shadow_coord[3].x, 0.75 + shadow_coord[3].y * 0.25)
	);
	
	int split_index = 0;
	if(shadow_coord[3].x < 0.99 && shadow_coord[3].x > 0.01
		&& shadow_coord[3].y < 0.99 && shadow_coord[3].y > 0.01)
		split_index = 3;
	if(shadow_coord[2].x < 0.99 && shadow_coord[2].x > 0.01
		&& shadow_coord[2].y < 0.99 && shadow_coord[2].y > 0.01)
		split_index = 2;
	if(shadow_coord[1].x < 0.99 && shadow_coord[1].x > 0.01
		&& shadow_coord[1].y < 0.99 && shadow_coord[1].y > 0.01)
		split_index = 1;
	if(shadow_coord[0].x < 0.99 && shadow_coord[0].x > 0.01
		&& shadow_coord[0].y < 0.99 && shadow_coord[0].y > 0.01)
		split_index = 0;
	
	if(shadow_coord[split_index].z <= 1)
		shadow -= (texture2D(shadowmap, tt[split_index]).z < (shadow_coord[split_index].z - 0.0005)) ? 1 : 0;

	vec4 surface = texture2D(tDiffuse, gl_TexCoord[0].st).rgba;
	if(surface.a < 0.2)
		discard;

	vec4 ambient = 			ambient_intensity * surface * ambient_color;
	vec4 diffuse = shadow * diffuse_intensity * surface * diffuse_color;

	gl_FragColor = ambient + diffuse; 
	
	//gl_FragColor = vec4(texture2D(shadowmap, tt[split_index]).rgb, 1);
	//gl_FragColor = vec4(light_dir, 1);
	//gl_FragColor = vec4(1, 0, 0, 1);
}
