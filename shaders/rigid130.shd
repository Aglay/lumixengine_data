{
	"passes" : ["MAIN", "SHADOW"],
	"attributes" : ["in_position", "in_normal", "in_tex_coords"],
	"shadowmap_required" : true
}

//BEGIN

#version 130
#ifdef VERTEX_SHADER

in vec3 in_position;
in vec2 in_tex_coords;
in vec3 in_normal;

out vec3 normals;
out vec2 tex_coords;
out vec4 position;

uniform mat4 world_matrix;
uniform mat4 view_matrix;
uniform mat4 projection_matrix;

void main( void )
{
	tex_coords = in_tex_coords;
	normals = mat3(world_matrix) * in_normal;
	
	position = world_matrix * vec4(in_position, 1);
	gl_Position = projection_matrix * (view_matrix * position); 
	
	gl_FrontColor = vec4(1.0, 1.0, 1.0, 1.0);
}

#endif // VERTEX_SHADER


#ifdef FRAGMENT_SHADER

	#ifdef SHADOW_PASS

		in vec2 			tex_coords;
		out vec4			out_color;
		uniform sampler2D	tDiffuse;

		void main( void )
		{
			#ifdef ALPHA_CUTOUT
				vec4 surface = texture2D(tDiffuse, tex_coords).rgba;
				if(surface.a < 0.3)
					discard;
				out_color = vec4(1, 1, 1, 1);
			#else
				out_color = vec4(tex_coords, 1, 1); // if I remove tex_coords from here, it also does not work correctly in #ifdef ALPHA_CUTOUT
			#endif
		}

	#else

		in vec4		position;
		in vec3		normals;
		in vec2 	tex_coords;

		out vec4			out_color;

		uniform sampler2D	tDiffuse;
		uniform sampler2D	shadowmap;
		uniform mat4 shadowmap_matrix0;
		uniform mat4 shadowmap_matrix1;
		uniform mat4 shadowmap_matrix2;
		uniform mat4 shadowmap_matrix3;
		uniform mat4 world_matrix;
		uniform mat4 view_matrix;
		uniform vec3 light_dir;
		uniform vec4 ambient_color;
		uniform float ambient_intensity;
		uniform vec4 diffuse_color;
		uniform float diffuse_intensity;
		uniform vec4 fog_color;
		uniform float fog_density;


		vec2 poissonDisk[4] = vec2[](
		  vec2( -0.94201624, -0.39906216 ),
		  vec2( 0.94558609, -0.76890725 ),
		  vec2( -0.094184101, -0.92938870 ),
		  vec2( 0.34495938, 0.29387760 )
		);


		float getFogFactor(float fFogCoord) 
		{ 
			float fResult = exp(-pow(fog_density * fFogCoord, 2.0)); 
			fResult = 1.0-clamp(fResult, 0.0, 1.0); 
			return fResult;
		}


		void main( void )
		{
			
			vec4 surface = texture2D(tDiffuse, tex_coords).rgba;
			if(surface.a < 0.30)
				discard;

			vec4 ambient = ambient_intensity * surface * ambient_color;
			vec4 diffuse = diffuse_intensity * surface * diffuse_color;

			vec4 p = view_matrix * position;
			out_color = mix(diffuse + ambient, fog_color, getFogFactor(p.z / p.w));
		}
	#endif // if SHADOW_PASS else
#endif // FRAGMENT_SHADER