
{
	"passes" : ["MAIN"],
	"attributes" : ["in_position"]
}

//BEGIN

#ifdef VERTEX_SHADER

in vec3 in_position;
in vec2 in_tex_coords;

out vec2 tex_coords;
out vec4 position;
out vec4 projected_pos;

uniform mat4 view_matrix;
uniform mat4 projection_matrix;

void main( void )
{
	position = vec4(in_position, 1);
	projected_pos = projection_matrix * (view_matrix * position); 
	gl_Position = projection_matrix * (view_matrix * position); 
}

#endif // VERTEX_SHADER

#ifdef FRAGMENT_SHADER

	in vec4				position;
	in vec4				projected_pos;
	in vec2 			tex_coords;
	out vec4			out_color;
	uniform vec3 		light_pos;
	uniform float 		light_range;
	uniform float 		diffuse_intensity;
	uniform vec4 		diffuse_color;
	uniform sampler2D	shadowmap;
	uniform sampler2D	tDiffuse;
	uniform sampler2D	tNormal;
	uniform sampler2D	tPosition;
	uniform mat4 		projection_matrix;
	
	void main( void )
	{
		vec2 uv = vec2(
			clamp((projected_pos.x / projected_pos.w + 1) * 0.5, 0, 1),
			clamp((projected_pos.y / projected_pos.w + 1) * 0.5, 0, 1)
		);
		vec4 surface = texture2D(tDiffuse, uv).rgba;
		vec4 pos = texture2D(tPosition, uv).rgba;
		float alpha = 1 - clamp(length(light_pos - pos.xyz) / light_range, 0, 1);
		//alpha = 1;
		vec4 c = diffuse_intensity * surface * diffuse_color;
		out_color = vec4(c.rgb, alpha); 
	}

#endif // FRAGMENT_SHADER