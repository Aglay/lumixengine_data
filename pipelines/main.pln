local DEFAULT_RENDER_MASK = getLayerMask("default")
local TRANSPARENT_RENDER_MASK = getLayerMask("transparent")
local deferred_shader = preloadShader("pipelines/deferred.shd")
local textured_quad_shader = preloadShader("pipelines/textured_quad.shd")
local tonemap_shader = preloadShader("pipelines/tonemap.shd")
local debug_shadowmap = false

function forwardPass(shadowmap)
	beginBlock("forward")
	local color_buffer = createRenderbuffer(1, 1, true, "rgba8")
	local dsbuffer = createRenderbuffer(1, 1, true, "depth24stencil8");

	setRenderTargets(CLEAR_ALL, color_buffer, dsbuffer)
	blending("")
	local view_params = getCameraParams()
	renderTerrains("", view_params,
		{ u_shadowmap = shadowmap }
	)
	renderMeshes(DEFAULT_RENDER_MASK, "", view_params,
		{ u_shadowmap = shadowmap }
	)
	endBlock()
	return color_buffer
end

function transparentPass(colorbuffer, dsbuffer)
	beginBlock("transparent_pass")
	
	setRenderTargets(0, colorbuffer, dsbuffer)
	
	local view_params = getCameraParams()
	blending("add")
	renderMeshes(TRANSPARENT_RENDER_MASK, "", view_params)
	endBlock()

end

function geomPass()
	beginBlock("geom_pass")
	local gbuffer0 = createRenderbuffer(1, 1, true, "rgba8")
	local gbuffer1 = createRenderbuffer(1, 1, true, "rgba16f")
	local gbuffer2 = createRenderbuffer(1, 1, true, "rgba8")
	local dsbuffer = createRenderbuffer(1, 1, true, "depth24stencil8")
	
	setRenderTargets(CLEAR_ALL, gbuffer0, gbuffer1, gbuffer2, dsbuffer)
	blending("")
	local view_params = getCameraParams()
	setStencil(0xff, STENCIL_ALWAYS, 1, 0xff, STENCIL_REPLACE, STENCIL_REPLACE, STENCIL_REPLACE);
	renderTerrains("DEFERRED", view_params)
	renderMeshes(DEFAULT_RENDER_MASK, "DEFERRED", view_params)
	setStencil(0xff, STENCIL_DISABLE, 0, 0, STENCIL_KEEP, STENCIL_KEEP, STENCIL_KEEP);
	endBlock()
	
	return gbuffer0, gbuffer1, gbuffer2, dsbuffer
end

function lightPass(gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	beginBlock("light_pass")
	local hdr_rb = createRenderbuffer(1, 1, true, "rgba16f")
	setRenderTargets(CLEAR_COLOR, hdr_rb)

	drawArray(0, 4, deferred_shader,
	{
		u_gbuffer0 = gbuffer0,
		u_gbuffer1 = gbuffer1,
		u_gbuffer2 = gbuffer2,
		u_gbuffer_depth = gbuffer_depth,
		u_shadowmap = shadowmap
	})
	endBlock()
	return hdr_rb
end

function debugRenderbuffer(rb, output)
	setRenderTargets(0, output)
	
	drawArray(0, 4, textured_quad_shader
		, { u_texture = rb }
		, { u_offset_scale = { 0.5, 0.5, 0.5, 0.5 } });
end

function shadowPass()
	beginBlock("shadows")
	local rb = createRenderbuffer(4096, 1024, false, "depth24")
	setRenderTargets(CLEAR_DEPTH, rb)
	
	for slice = 0, 3 do 
		local view_params = getShadowCameraParams(slice, 4096)
		viewport(slice * 1024, 0, 1024, 1024)
		beginBlock("slice " .. tostring(slice + 1))
		renderMeshes(DEFAULT_RENDER_MASK, "DEPTH", view_params)
		endBlock()
	end
	endBlock()
	return rb
end

function postprocess(phase, hdr_buffer, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
	local prev = hdr_buffer
	if _G["postprocesses"] ~= nil then
		for _, value in ipairs(_G["postprocesses"]) do
			prev = value(getfenv(1), phase, prev, gbuffer0, gbuffer1, gbuffer_depth, shadowmap)
		end
	end
	return prev
end

function tonemap(hdr_buffer)
	beginBlock("tonemap")
	local rb = createRenderbuffer(1, 1, true, "rgba8")
	setRenderTargets(0, rb)
	drawArray(0, 4, tonemap_shader
		, { u_hdrbuffer = hdr_buffer }
	)
	endBlock()
	return rb
end

function debugPass(output, shadowmap)
	if debug_shadowmap then
		debugRenderbuffer(shadowmap, output)
	end
end


function main()
	local use_deferred = true
	local shadowmap = shadowPass()
	if use_deferred then
		local gbuffer0, gbuffer1, gbuffer2, gbuffer_depth = geomPass()
		local hdr_buffer = lightPass(gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)

		local res = hdr_buffer		
		if PREVIEW == nil then
			res = postprocess("pre", hdr_buffer, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
		end
		
		transparentPass(res, gbuffer_depth)

		if PREVIEW == nil then
			res = postprocess("post", res, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
		end
		
		res = tonemap(res)

		if PREVIEW == nil then
			res = postprocess("post_tonemap", res, gbuffer0, gbuffer1, gbuffer2, gbuffer_depth, shadowmap)
		end

		debugPass(res, shadowmap)
			
		if renderGizmos ~= nil then
			setRenderTargets(CLEAR_DEPTH, res)
			renderGizmos()
			render2D()
			renderIcons()
			renderDebugShapes()
		end
	
		setOutput(res)
	else 
		local res = forwardPass(shadowmap)
		
		renderGizmos()
		render2D()
		renderIcons()
		renderDebugShapes()

		setOutput(res)
	end
end

function onGUI()
	if ImGui.Button("Debug") then
		ImGui.OpenPopup("debug_popup")
	end

	if ImGui.BeginPopup("debug_popup") then
		changed, debug_shadowmap = ImGui.Checkbox("Shadowmap", debug_shadowmap)
		ImGui.EndPopup()
	end
end