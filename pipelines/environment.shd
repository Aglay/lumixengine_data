include "pipelines/common.glsl"

------------------

vertex_shader [[
	in vec3 a_position;
	out vec3 v_uv;
	uniform vec4 u_pos_radius;
	void main()
	{
		v_uv = a_position;
		gl_Position = u_camera_projection * u_camera_view * vec4(a_position * u_pos_radius.w + u_pos_radius.xyz, 1);
	}
]]

---------------------


fragment_shader [[
	in vec3 v_uv;
	out vec4 o_color;

	uniform sampler2D u_gbuffer0;
	uniform sampler2D u_gbuffer1;
	uniform sampler2D u_gbuffer2;
	uniform sampler2D u_gbuffer_depth;
	uniform sampler2D u_shadowmap;
	
	void main()
	{
		vec2 screen_uv = gl_FragCoord.xy / u_framebuffer_size;
		vec4 gb0 = texture(u_gbuffer0, screen_uv);
		vec4 gb1 = texture(u_gbuffer1, screen_uv);
		vec4 gb2 = texture(u_gbuffer2, screen_uv);
		float depth = texture(u_gbuffer_depth, screen_uv).x;

		vec3 albedo = gb0.rgb;
		vec3 normal = gb1.rgb;
		float roughness = gb0.w;
		float metallic = gb1.w;
		float emission = unpackEmission(gb2.x);

		vec3 wpos = getViewPosition(u_gbuffer_depth, u_camera_inv_view_projection, screen_uv);
		vec3 V = normalize(-wpos);
		vec3 L = normalize(u_light_direction);
		
		vec3 indirect = PBR_ComputeIndirectLight(albedo, roughness, metallic, normal, V);
				
		o_color = vec4(indirect, 1);
		//o_color = vec4(abs(u_camera_pos), 1);
		//o_color = vec4(1, 0, 0, 1);
	}
]]